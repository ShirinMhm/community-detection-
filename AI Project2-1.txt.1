from unittest import result
import numpy as np
from array import array
import random
import pandas as pd
def  find_adj():
    file1=open("sample dataset.txt","r")
    a=file1.readline()
    n=int(a)
    Adj=[[0 for x in range(n)]for y in range(n)]
    for i in range(2*n):
        x,y=file1.readline().split()
        x=int(x)
        y=int(y)
        Adj[x-1][y-1]=1
        Adj[y-1][x-1]=1
    return Adj
def community_detection(adj,population=400,generation=40,r=1.5):
    Adj = adj
    nodes_length = len(adj)

    d = {"chrom":[generate_chrom(nodes_length,Adj) for n in range(population)]}
    dframe = pd.DataFrame(data= d)
    dframe["subsets"] = dframe["chrom"].apply(find_subsets)
    dframe["community_score"]=dframe.apply(lambda x: community_score(x["chrom"],x["subsets"],r,Adj),axis=1)
    
    gen = 0
    population_count = population
    while gen < generation:
        for i in range(int(np.floor(population/10))):
            p1 = 0
            p2 = 0
            elites = dframe.sort_values("community_score",ascending=True)[int(np.floor(population/10)):]
            p1 = roulette_selection(elites)
            p2 = roulette_selection(elites)
            child=uniform_crossover(dframe["chrom"][p1],dframe["chrom"][p2],0.8)
            if len(child)==0:
                continue
            child=mutation(child,Adj,0.2)
            child_subsets = find_subsets(child)
            child_cs = community_score(child,child_subsets,r,Adj)
            dframe.loc[population_count]=[child,child_subsets,child_cs]
            population_count += 1
        dfsorted = dframe.sort_values("community_score",ascending=False)
        to_drop = dfsorted.index[population:]
        dframe.drop(to_drop,inplace=True)
        gen +=1        
    sorted_df = dframe.sort_values("community_score",ascending=False).index[0]
    
    nodes_subsets = dframe["subsets"][sorted_df]
    nodes=[]
    result=[]
    for x in range(nodes_length):
        nodes.append(x+1)
    for subs in nodes_subsets:
        subset = []
        for n in subs:
            subset.append(nodes[n])
        # print(subset)
    print(subset)
    result=missing(subset)
        # for i in range(len(miss)):
        #     temp=abs(miss[i])-1
        #     if temp<len(miss):
        #         if miss[temp]>0:
        #             miss[temp]=-miss[temp]
        # for i in range(len(miss)):
        #     if(miss[i]>0):
        #         result.append(i+1)
    print(result)
def missing(miss):
        result=[]
        for i in range(len(miss)):
            temp=abs(miss[i])-1
            if temp<len(miss):
                if miss[temp]>0:
                    miss[temp]=-miss[temp]
        for i in range(len(miss)):
            if(miss[i]>0):
                result.append(i+1)
        return result
def generate_chrom(n,adj):
     chrom=[]
     for x in range(n):
         rand=random.randint(0,n-1)
         while adj[x][rand] != 1:
             rand=random.randint(0,n-1)
         chrom.append(rand)
     return chrom
def merge_subsets(sub):
    arr =[]
    to_skip=[]
    for s in range(len(sub)):
        if sub[s] not in to_skip:
            new = sub[s]
            for x in sub:
                if sub[s] & x:
                    new = new | x
                    to_skip.append(x)
            arr.append(new)
    return arr
def find_subsets(chrom):
    sub = [{x,chrom[x]} for x in range(len(chrom))]
    result=sub
    i=0
    while i<len(result):
        candidate = merge_subsets(result)
        if candidate != result:
            result = candidate
        else:
            break
        result=candidate
        i+=1
    return result
def community_score(chrom,subsets,r,Adj):
    CS=0
    for s in subsets:
        submatrix = [[0 for x in range(len(chrom))]for y in range(len(chrom))]
        for i in s:
            for j in s:
                submatrix[i][j]=adj[i][j]
        M=0
        v=0
        sum=0
        for i in s:
            for j in s:
                sum+=submatrix[i][j]
        for row in list(s):
            row_mean = sum/len(s)
            v+=sum
            M+=(row_mean**r)/len(s)
        CS+=M*v
    return CS
def uniform_crossover(parent_1,parent_2,crossover_rate):
    rand=random.random()
    if rand < crossover_rate:
        length = len(parent_1)
        mask = np.random.randint(2, size=length)
        child = [0 for x in range(length)]
        for i in range(len(mask)):
            if mask[i] == 1:
                child[i]=parent_1[i]
            else:
                child[i]=parent_2[i]
        return child
    else:
        arr=[]
        return arr
def roulette_selection(df_elites):
    prob = np.random.random_sample()
    sum_cs=np.sum(df_elites["community_score"])
    x=0
    selected = 0
    for i in df_elites.index:
        x += df_elites["community_score"][i]
        X=x/sum_cs
        if prob < X:
            chosen=i
            break
    return chosen
def mutation(chrom,Adj,mutation_rate):
    if np.random.random_sample() < mutation_rate:
        chrom = chrom
        neighbor = []
        while len(neighbor) < 2:
            mutant = np.random.randint(1,len(chrom))
            row = Adj[mutant]
            neighbor = [i for i in range(len(row)) if row[i]==1]
            if len(neighbor) > 1:
                neighbor.remove(chrom[mutant])
                to_change=int(np.floor(np.random.random_sample()*(len(neighbor))))
                chrom[mutant]=neighbor[to_change]
                neighbor.append(chrom[mutant])
    return chrom
adj=find_adj()
community_detection(adj)
# d = {"chrom":[generate_chrom(34,adj) for n in range(300)]}
# dframe = pd.DataFrame(data= d)
# chrom=generate_chrom(34,adj)
# subset=find_subsets(chrom)
# community_score(chrom,subset,1.5,adj)
